/* tslint:disable */
/* eslint-disable */
/**
 * SpringBoot3.4.x-init
 * Virosa-Plus
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: 2156722358@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface AjaxResult
 */
export interface AjaxResult {
	/**
	 * 错误码，通常为 0 表示成功，非 0 表示错误类型
	 * @type {number}
	 * @memberof AjaxResult
	 */
	code: number;

	/**
	 * 返回的数据内容，具体内容会根据 API 接口返回的实际数据类型不同而不同
	 * @type {any}
	 * @memberof AjaxResult
	 */
	data: any;

	/**
	 * 返回的消息，一般用于提示用户
	 * @type {string}
	 * @memberof AjaxResult
	 */
	msg: string;
}

/**
 *
 * @export
 * @interface ArticleAddRequest
 */
export interface ArticleAddRequest {
    /**
     *
     * @type {string}
     * @memberof ArticleAddRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleAddRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleAddRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleAddRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleAddRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface ArticleQueryRequest
 */
export interface ArticleQueryRequest {
    /**
     *
     * @type {number}
     * @memberof ArticleQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof ArticleQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof ArticleQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'isPublished'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface ArticleUpdateRequest
 */
export interface ArticleUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof ArticleUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof ArticleUpdateRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleUpdateRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleUpdateRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleUpdateRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleUpdateRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface BookAddRequest
 */
export interface BookAddRequest {
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'author'?: string;
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof BookAddRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface BookQueryRequest
 */
export interface BookQueryRequest {
    /**
     *
     * @type {number}
     * @memberof BookQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof BookQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof BookQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'author'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'isPublished'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof BookQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface BookUpdateRequest
 */
export interface BookUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof BookUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'author'?: string;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof BookUpdateRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface FamousAddRequest
 */
export interface FamousAddRequest {
    /**
     *
     * @type {string}
     * @memberof FamousAddRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousAddRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousAddRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousAddRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface FamousQueryRequest
 */
export interface FamousQueryRequest {
    /**
     *
     * @type {number}
     * @memberof FamousQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof FamousQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof FamousQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'isPublished'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface FamousUpdateRequest
 */
export interface FamousUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof FamousUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FamousUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousUpdateRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousUpdateRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof FamousUpdateRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface IdRequest
 */
export interface IdRequest {
    /**
     *
     * @type {number}
     * @memberof IdRequest
     */
    'id'?: number;
}
/**
 *
 * @export
 * @interface IssueAddRequest
 */
export interface IssueAddRequest {
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueAddRequest
     */
    'nickname'?: string;
}
/**
 *
 * @export
 * @interface IssueQueryRequest
 */
export interface IssueQueryRequest {
    /**
     *
     * @type {number}
     * @memberof IssueQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof IssueQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof IssueQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'nickname'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface IssueUpdateRequest
 */
export interface IssueUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof IssueUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'nickname'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueUpdateRequest
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface MessageAddRequest
 */
export interface MessageAddRequest {
    /**
     *
     * @type {string}
     * @memberof MessageAddRequest
     */
    'content'?: string;
}
/**
 *
 * @export
 * @interface MessageQueryRequest
 */
export interface MessageQueryRequest {
    /**
     *
     * @type {number}
     * @memberof MessageQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof MessageQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof MessageQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof MessageQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof MessageQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof MessageQueryRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof MessageQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface MessageUpdateRequest
 */
export interface MessageUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof MessageUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof MessageUpdateRequest
     */
    'content'?: string;
}
/**
 *
 * @export
 * @interface MusicAddRequest
 */
export interface MusicAddRequest {
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'artist'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'album'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'url'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'duration'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicAddRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface MusicQueryRequest
 */
export interface MusicQueryRequest {
    /**
     *
     * @type {number}
     * @memberof MusicQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof MusicQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof MusicQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'artist'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'album'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'duration'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'isPublished'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface MusicUpdateRequest
 */
export interface MusicUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof MusicUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'artist'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'album'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'url'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'duration'?: string;
    /**
     *
     * @type {string}
     * @memberof MusicUpdateRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface NodeAddRequest
 */
export interface NodeAddRequest {
    /**
     *
     * @type {string}
     * @memberof NodeAddRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeAddRequest
     */
    'type'?: string;
    /**
     *
     * @type {number}
     * @memberof NodeAddRequest
     */
    'parentId'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeAddRequest
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface NodeQueryRequest
 */
export interface NodeQueryRequest {
    /**
     *
     * @type {number}
     * @memberof NodeQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof NodeQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof NodeQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'type'?: string;
    /**
     *
     * @type {number}
     * @memberof NodeQueryRequest
     */
    'parentId'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface NodeUpdateRequest
 */
export interface NodeUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof NodeUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeUpdateRequest
     */
    'type'?: string;
    /**
     *
     * @type {number}
     * @memberof NodeUpdateRequest
     */
    'parentId'?: number;
    /**
     *
     * @type {string}
     * @memberof NodeUpdateRequest
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface VideoAddRequest
 */
export interface VideoAddRequest {
    /**
     *
     * @type {number}
     * @memberof VideoAddRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof VideoAddRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoAddRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoAddRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoAddRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoAddRequest
     */
    'isPublished'?: string;
}
/**
 *
 * @export
 * @interface VideoQueryRequest
 */
export interface VideoQueryRequest {
    /**
     *
     * @type {number}
     * @memberof VideoQueryRequest
     */
    'current'?: number;
    /**
     *
     * @type {number}
     * @memberof VideoQueryRequest
     */
    'pageSize'?: number;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'sortField'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'sortOrder'?: string;
    /**
     *
     * @type {number}
     * @memberof VideoQueryRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'isPublished'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'updateTime'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoQueryRequest
     */
    'createTime'?: string;
}
/**
 *
 * @export
 * @interface VideoUpdateRequest
 */
export interface VideoUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof VideoUpdateRequest
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof VideoUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoUpdateRequest
     */
    'cover'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoUpdateRequest
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoUpdateRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof VideoUpdateRequest
     */
    'isPublished'?: string;
}

/**
 * ArticleControllerApi - axios parameter creator
 * @export
 */
export const ArticleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {ArticleAddRequest} articleAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArticle: async (articleAddRequest: ArticleAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleAddRequest' is not null or undefined
            assertParamExists('addArticle', 'articleAddRequest', articleAddRequest)
            const localVarPath = `/article/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteArticle', 'idRequest', idRequest)
            const localVarPath = `/article/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArticleById', 'id', id)
            const localVarPath = `/article/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArticleVOById', 'id', id)
            const localVarPath = `/article/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticleByPage: async (articleQueryRequest: ArticleQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleQueryRequest' is not null or undefined
            assertParamExists('listArticleByPage', 'articleQueryRequest', articleQueryRequest)
            const localVarPath = `/article/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticleVOByPage: async (articleQueryRequest: ArticleQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleQueryRequest' is not null or undefined
            assertParamExists('listArticleVOByPage', 'articleQueryRequest', articleQueryRequest)
            const localVarPath = `/article/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ArticleUpdateRequest} articleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle: async (articleUpdateRequest: ArticleUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleUpdateRequest' is not null or undefined
            assertParamExists('updateArticle', 'articleUpdateRequest', articleUpdateRequest)
            const localVarPath = `/article/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleControllerApi - functional programming interface
 * @export
 */
export const ArticleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {ArticleAddRequest} articleAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addArticle(articleAddRequest: ArticleAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addArticle(articleAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.addArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticle(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticle(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.deleteArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.getArticleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.getArticleVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticleByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticleByPage(articleQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.listArticleByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticleVOByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticleVOByPage(articleQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.listArticleVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {ArticleUpdateRequest} articleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArticle(articleUpdateRequest: ArticleUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArticle(articleUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.updateArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArticleControllerApi - factory interface
 * @export
 */
export const ArticleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleControllerApiFp(configuration)
    return {
        /**
         *
         * @param {ArticleAddRequest} articleAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArticle(articleAddRequest: ArticleAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addArticle(articleAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteArticle(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getArticleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getArticleVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticleByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listArticleByPage(articleQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ArticleQueryRequest} articleQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticleVOByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listArticleVOByPage(articleQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ArticleUpdateRequest} articleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle(articleUpdateRequest: ArticleUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateArticle(articleUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleControllerApi - object-oriented interface
 * @export
 * @class ArticleControllerApi
 * @extends {BaseAPI}
 */
export class ArticleControllerApi extends BaseAPI {
    /**
     *
     * @param {ArticleAddRequest} articleAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public addArticle(articleAddRequest: ArticleAddRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).addArticle(articleAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public deleteArticle(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).deleteArticle(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public getArticleById(id: number, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).getArticleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public getArticleVOById(id: number, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).getArticleVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ArticleQueryRequest} articleQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public listArticleByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).listArticleByPage(articleQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ArticleQueryRequest} articleQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public listArticleVOByPage(articleQueryRequest: ArticleQueryRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).listArticleVOByPage(articleQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ArticleUpdateRequest} articleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public updateArticle(articleUpdateRequest: ArticleUpdateRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).updateArticle(articleUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookControllerApi - axios parameter creator
 * @export
 */
export const BookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {BookAddRequest} bookAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook: async (bookAddRequest: BookAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookAddRequest' is not null or undefined
            assertParamExists('addBook', 'bookAddRequest', bookAddRequest)
            const localVarPath = `/book/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteBook', 'idRequest', idRequest)
            const localVarPath = `/book/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookById', 'id', id)
            const localVarPath = `/book/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookVOById', 'id', id)
            const localVarPath = `/book/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookByPage: async (bookQueryRequest: BookQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookQueryRequest' is not null or undefined
            assertParamExists('listBookByPage', 'bookQueryRequest', bookQueryRequest)
            const localVarPath = `/book/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookVOByPage: async (bookQueryRequest: BookQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookQueryRequest' is not null or undefined
            assertParamExists('listBookVOByPage', 'bookQueryRequest', bookQueryRequest)
            const localVarPath = `/book/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {BookUpdateRequest} bookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (bookUpdateRequest: BookUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookUpdateRequest' is not null or undefined
            assertParamExists('updateBook', 'bookUpdateRequest', bookUpdateRequest)
            const localVarPath = `/book/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookControllerApi - functional programming interface
 * @export
 */
export const BookControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {BookAddRequest} bookAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBook(bookAddRequest: BookAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBook(bookAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.addBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBook(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBook(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.deleteBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.getBookById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.getBookVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBookByPage(bookQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.listBookByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookVOByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBookVOByPage(bookQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.listBookVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {BookUpdateRequest} bookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(bookUpdateRequest: BookUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(bookUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.updateBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookControllerApi - factory interface
 * @export
 */
export const BookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookControllerApiFp(configuration)
    return {
        /**
         *
         * @param {BookAddRequest} bookAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook(bookAddRequest: BookAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addBook(bookAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteBook(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getBookById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getBookVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listBookByPage(bookQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {BookQueryRequest} bookQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookVOByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listBookVOByPage(bookQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {BookUpdateRequest} bookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(bookUpdateRequest: BookUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateBook(bookUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookControllerApi - object-oriented interface
 * @export
 * @class BookControllerApi
 * @extends {BaseAPI}
 */
export class BookControllerApi extends BaseAPI {
    /**
     *
     * @param {BookAddRequest} bookAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public addBook(bookAddRequest: BookAddRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).addBook(bookAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public deleteBook(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).deleteBook(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getBookById(id: number, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).getBookById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getBookVOById(id: number, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).getBookVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {BookQueryRequest} bookQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public listBookByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).listBookByPage(bookQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {BookQueryRequest} bookQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public listBookVOByPage(bookQueryRequest: BookQueryRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).listBookVOByPage(bookQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {BookUpdateRequest} bookUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public updateBook(bookUpdateRequest: BookUpdateRequest, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).updateBook(bookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FamousControllerApi - axios parameter creator
 * @export
 */
export const FamousControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {FamousAddRequest} famousAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFamous: async (famousAddRequest: FamousAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famousAddRequest' is not null or undefined
            assertParamExists('addFamous', 'famousAddRequest', famousAddRequest)
            const localVarPath = `/famous/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famousAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFamous: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteFamous', 'idRequest', idRequest)
            const localVarPath = `/famous/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamousById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFamousById', 'id', id)
            const localVarPath = `/famous/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamousVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFamousVOById', 'id', id)
            const localVarPath = `/famous/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFamousByPage: async (famousQueryRequest: FamousQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famousQueryRequest' is not null or undefined
            assertParamExists('listFamousByPage', 'famousQueryRequest', famousQueryRequest)
            const localVarPath = `/famous/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famousQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFamousVOByPage: async (famousQueryRequest: FamousQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famousQueryRequest' is not null or undefined
            assertParamExists('listFamousVOByPage', 'famousQueryRequest', famousQueryRequest)
            const localVarPath = `/famous/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famousQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {FamousUpdateRequest} famousUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFamous: async (famousUpdateRequest: FamousUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famousUpdateRequest' is not null or undefined
            assertParamExists('updateFamous', 'famousUpdateRequest', famousUpdateRequest)
            const localVarPath = `/famous/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famousUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamousControllerApi - functional programming interface
 * @export
 */
export const FamousControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamousControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {FamousAddRequest} famousAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFamous(famousAddRequest: FamousAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFamous(famousAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.addFamous']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFamous(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFamous(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.deleteFamous']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamousById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamousById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.getFamousById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamousVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamousVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.getFamousVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFamousByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFamousByPage(famousQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.listFamousByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFamousVOByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFamousVOByPage(famousQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.listFamousVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {FamousUpdateRequest} famousUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFamous(famousUpdateRequest: FamousUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFamous(famousUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamousControllerApi.updateFamous']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FamousControllerApi - factory interface
 * @export
 */
export const FamousControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamousControllerApiFp(configuration)
    return {
        /**
         *
         * @param {FamousAddRequest} famousAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFamous(famousAddRequest: FamousAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addFamous(famousAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFamous(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteFamous(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamousById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getFamousById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamousVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getFamousVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFamousByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listFamousByPage(famousQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FamousQueryRequest} famousQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFamousVOByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listFamousVOByPage(famousQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FamousUpdateRequest} famousUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFamous(famousUpdateRequest: FamousUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateFamous(famousUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamousControllerApi - object-oriented interface
 * @export
 * @class FamousControllerApi
 * @extends {BaseAPI}
 */
export class FamousControllerApi extends BaseAPI {
    /**
     *
     * @param {FamousAddRequest} famousAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public addFamous(famousAddRequest: FamousAddRequest, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).addFamous(famousAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public deleteFamous(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).deleteFamous(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public getFamousById(id: number, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).getFamousById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public getFamousVOById(id: number, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).getFamousVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {FamousQueryRequest} famousQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public listFamousByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).listFamousByPage(famousQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {FamousQueryRequest} famousQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public listFamousVOByPage(famousQueryRequest: FamousQueryRequest, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).listFamousVOByPage(famousQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {FamousUpdateRequest} famousUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamousControllerApi
     */
    public updateFamous(famousUpdateRequest: FamousUpdateRequest, options?: RawAxiosRequestConfig) {
        return FamousControllerApiFp(this.configuration).updateFamous(famousUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileControllerApi - axios parameter creator
 * @export
 */
export const FileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFile', 'file', file)
            const localVarPath = `/file/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} year
         * @param {string} month
         * @param {string} day
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFile: async (year: string, month: string, day: string, fileName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('viewFile', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('viewFile', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('viewFile', 'day', day)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('viewFile', 'fileName', fileName)
            const localVarPath = `/file/view/{year}/{month}/{day}/{fileName}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileControllerApi - functional programming interface
 * @export
 */
export const FileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} year
         * @param {string} month
         * @param {string} day
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFile(year: string, month: string, day: string, fileName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFile(year, month, day, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileControllerApi.viewFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileControllerApi - factory interface
 * @export
 */
export const FileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileControllerApiFp(configuration)
    return {
        /**
         *
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: File, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.uploadFile(file, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} year
         * @param {string} month
         * @param {string} day
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFile(year: string, month: string, day: string, fileName: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.viewFile(year, month, day, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileControllerApi - object-oriented interface
 * @export
 * @class FileControllerApi
 * @extends {BaseAPI}
 */
export class FileControllerApi extends BaseAPI {
    /**
     *
     * @param {File} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public uploadFile(file: File, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).uploadFile(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} year
     * @param {string} month
     * @param {string} day
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public viewFile(year: string, month: string, day: string, fileName: string, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).viewFile(year, month, day, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IssueControllerApi - axios parameter creator
 * @export
 */
export const IssueControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {IssueAddRequest} issueAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIssue: async (issueAddRequest: IssueAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueAddRequest' is not null or undefined
            assertParamExists('addIssue', 'issueAddRequest', issueAddRequest)
            const localVarPath = `/issue/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssue: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteIssue', 'idRequest', idRequest)
            const localVarPath = `/issue/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIssueById', 'id', id)
            const localVarPath = `/issue/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIssueVOById', 'id', id)
            const localVarPath = `/issue/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssueByPage: async (issueQueryRequest: IssueQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueQueryRequest' is not null or undefined
            assertParamExists('listIssueByPage', 'issueQueryRequest', issueQueryRequest)
            const localVarPath = `/issue/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssueVOByPage: async (issueQueryRequest: IssueQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueQueryRequest' is not null or undefined
            assertParamExists('listIssueVOByPage', 'issueQueryRequest', issueQueryRequest)
            const localVarPath = `/issue/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IssueUpdateRequest} issueUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssue: async (issueUpdateRequest: IssueUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueUpdateRequest' is not null or undefined
            assertParamExists('updateIssue', 'issueUpdateRequest', issueUpdateRequest)
            const localVarPath = `/issue/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueControllerApi - functional programming interface
 * @export
 */
export const IssueControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssueControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {IssueAddRequest} issueAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIssue(issueAddRequest: IssueAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIssue(issueAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.addIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssue(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssue(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.deleteIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssueById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssueById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.getIssueById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssueVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssueVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.getIssueVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIssueByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIssueByPage(issueQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.listIssueByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIssueVOByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIssueVOByPage(issueQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.listIssueVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IssueUpdateRequest} issueUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssue(issueUpdateRequest: IssueUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIssue(issueUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueControllerApi.updateIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IssueControllerApi - factory interface
 * @export
 */
export const IssueControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssueControllerApiFp(configuration)
    return {
        /**
         *
         * @param {IssueAddRequest} issueAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIssue(issueAddRequest: IssueAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addIssue(issueAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssue(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteIssue(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getIssueById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getIssueVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssueByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listIssueByPage(issueQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IssueQueryRequest} issueQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssueVOByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listIssueVOByPage(issueQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IssueUpdateRequest} issueUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssue(issueUpdateRequest: IssueUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateIssue(issueUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueControllerApi - object-oriented interface
 * @export
 * @class IssueControllerApi
 * @extends {BaseAPI}
 */
export class IssueControllerApi extends BaseAPI {
    /**
     *
     * @param {IssueAddRequest} issueAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public addIssue(issueAddRequest: IssueAddRequest, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).addIssue(issueAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public deleteIssue(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).deleteIssue(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public getIssueById(id: number, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).getIssueById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public getIssueVOById(id: number, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).getIssueVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IssueQueryRequest} issueQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public listIssueByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).listIssueByPage(issueQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IssueQueryRequest} issueQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public listIssueVOByPage(issueQueryRequest: IssueQueryRequest, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).listIssueVOByPage(issueQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IssueUpdateRequest} issueUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueControllerApi
     */
    public updateIssue(issueUpdateRequest: IssueUpdateRequest, options?: RawAxiosRequestConfig) {
        return IssueControllerApiFp(this.configuration).updateIssue(issueUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {MessageAddRequest} messageAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage: async (messageAddRequest: MessageAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageAddRequest' is not null or undefined
            assertParamExists('addMessage', 'messageAddRequest', messageAddRequest)
            const localVarPath = `/message/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteMessage', 'idRequest', idRequest)
            const localVarPath = `/message/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMessageById', 'id', id)
            const localVarPath = `/message/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMessageVOById', 'id', id)
            const localVarPath = `/message/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageByPage: async (messageQueryRequest: MessageQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageQueryRequest' is not null or undefined
            assertParamExists('listMessageByPage', 'messageQueryRequest', messageQueryRequest)
            const localVarPath = `/message/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageVOByPage: async (messageQueryRequest: MessageQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageQueryRequest' is not null or undefined
            assertParamExists('listMessageVOByPage', 'messageQueryRequest', messageQueryRequest)
            const localVarPath = `/message/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MessageUpdateRequest} messageUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (messageUpdateRequest: MessageUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageUpdateRequest' is not null or undefined
            assertParamExists('updateMessage', 'messageUpdateRequest', messageUpdateRequest)
            const localVarPath = `/message/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {MessageAddRequest} messageAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMessage(messageAddRequest: MessageAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMessage(messageAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.addMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessage(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.deleteMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.getMessageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.getMessageVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMessageByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessageByPage(messageQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.listMessageByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMessageVOByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessageVOByPage(messageQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.listMessageVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MessageUpdateRequest} messageUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(messageUpdateRequest: MessageUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(messageUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.updateMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageControllerApiFp(configuration)
    return {
        /**
         *
         * @param {MessageAddRequest} messageAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage(messageAddRequest: MessageAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addMessage(messageAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteMessage(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getMessageById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getMessageVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listMessageByPage(messageQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MessageQueryRequest} messageQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageVOByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listMessageVOByPage(messageQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MessageUpdateRequest} messageUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(messageUpdateRequest: MessageUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateMessage(messageUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     *
     * @param {MessageAddRequest} messageAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public addMessage(messageAddRequest: MessageAddRequest, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).addMessage(messageAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public deleteMessage(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).deleteMessage(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getMessageById(id: number, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).getMessageById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getMessageVOById(id: number, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).getMessageVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MessageQueryRequest} messageQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public listMessageByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).listMessageByPage(messageQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MessageQueryRequest} messageQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public listMessageVOByPage(messageQueryRequest: MessageQueryRequest, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).listMessageVOByPage(messageQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MessageUpdateRequest} messageUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public updateMessage(messageUpdateRequest: MessageUpdateRequest, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).updateMessage(messageUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MusicControllerApi - axios parameter creator
 * @export
 */
export const MusicControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {MusicAddRequest} musicAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMusic: async (musicAddRequest: MusicAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicAddRequest' is not null or undefined
            assertParamExists('addMusic', 'musicAddRequest', musicAddRequest)
            const localVarPath = `/music/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMusic: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteMusic', 'idRequest', idRequest)
            const localVarPath = `/music/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMusicById', 'id', id)
            const localVarPath = `/music/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMusicVOById', 'id', id)
            const localVarPath = `/music/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMusicByPage: async (musicQueryRequest: MusicQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicQueryRequest' is not null or undefined
            assertParamExists('listMusicByPage', 'musicQueryRequest', musicQueryRequest)
            const localVarPath = `/music/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMusicVOByPage: async (musicQueryRequest: MusicQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicQueryRequest' is not null or undefined
            assertParamExists('listMusicVOByPage', 'musicQueryRequest', musicQueryRequest)
            const localVarPath = `/music/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MusicUpdateRequest} musicUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMusic: async (musicUpdateRequest: MusicUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicUpdateRequest' is not null or undefined
            assertParamExists('updateMusic', 'musicUpdateRequest', musicUpdateRequest)
            const localVarPath = `/music/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MusicControllerApi - functional programming interface
 * @export
 */
export const MusicControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MusicControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {MusicAddRequest} musicAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMusic(musicAddRequest: MusicAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMusic(musicAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.addMusic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMusic(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMusic(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.deleteMusic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMusicById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMusicById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.getMusicById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMusicVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMusicVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.getMusicVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMusicByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMusicByPage(musicQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.listMusicByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMusicVOByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMusicVOByPage(musicQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.listMusicVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {MusicUpdateRequest} musicUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMusic(musicUpdateRequest: MusicUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMusic(musicUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MusicControllerApi.updateMusic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MusicControllerApi - factory interface
 * @export
 */
export const MusicControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MusicControllerApiFp(configuration)
    return {
        /**
         *
         * @param {MusicAddRequest} musicAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMusic(musicAddRequest: MusicAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addMusic(musicAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMusic(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteMusic(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getMusicById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMusicVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getMusicVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMusicByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listMusicByPage(musicQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MusicQueryRequest} musicQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMusicVOByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listMusicVOByPage(musicQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MusicUpdateRequest} musicUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMusic(musicUpdateRequest: MusicUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateMusic(musicUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MusicControllerApi - object-oriented interface
 * @export
 * @class MusicControllerApi
 * @extends {BaseAPI}
 */
export class MusicControllerApi extends BaseAPI {
    /**
     *
     * @param {MusicAddRequest} musicAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public addMusic(musicAddRequest: MusicAddRequest, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).addMusic(musicAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public deleteMusic(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).deleteMusic(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public getMusicById(id: number, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).getMusicById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public getMusicVOById(id: number, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).getMusicVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MusicQueryRequest} musicQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public listMusicByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).listMusicByPage(musicQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MusicQueryRequest} musicQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public listMusicVOByPage(musicQueryRequest: MusicQueryRequest, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).listMusicVOByPage(musicQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MusicUpdateRequest} musicUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicControllerApi
     */
    public updateMusic(musicUpdateRequest: MusicUpdateRequest, options?: RawAxiosRequestConfig) {
        return MusicControllerApiFp(this.configuration).updateMusic(musicUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodeControllerApi - axios parameter creator
 * @export
 */
export const NodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {NodeAddRequest} nodeAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode: async (nodeAddRequest: NodeAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeAddRequest' is not null or undefined
            assertParamExists('addNode', 'nodeAddRequest', nodeAddRequest)
            const localVarPath = `/node/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteNode', 'idRequest', idRequest)
            const localVarPath = `/node/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNodeById', 'id', id)
            const localVarPath = `/node/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNodeVOById', 'id', id)
            const localVarPath = `/node/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeByPage: async (nodeQueryRequest: NodeQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeQueryRequest' is not null or undefined
            assertParamExists('listNodeByPage', 'nodeQueryRequest', nodeQueryRequest)
            const localVarPath = `/node/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeVOByPage: async (nodeQueryRequest: NodeQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeQueryRequest' is not null or undefined
            assertParamExists('listNodeVOByPage', 'nodeQueryRequest', nodeQueryRequest)
            const localVarPath = `/node/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {NodeUpdateRequest} nodeUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNode: async (nodeUpdateRequest: NodeUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeUpdateRequest' is not null or undefined
            assertParamExists('updateNode', 'nodeUpdateRequest', nodeUpdateRequest)
            const localVarPath = `/node/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeControllerApi - functional programming interface
 * @export
 */
export const NodeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {NodeAddRequest} nodeAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNode(nodeAddRequest: NodeAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNode(nodeAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.addNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNode(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNode(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.deleteNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.getNodeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.getNodeVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNodeByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNodeByPage(nodeQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.listNodeByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNodeVOByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNodeVOByPage(nodeQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.listNodeVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {NodeUpdateRequest} nodeUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNode(nodeUpdateRequest: NodeUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNode(nodeUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.updateNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeControllerApi - factory interface
 * @export
 */
export const NodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeControllerApiFp(configuration)
    return {
        /**
         *
         * @param {NodeAddRequest} nodeAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(nodeAddRequest: NodeAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addNode(nodeAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteNode(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getNodeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getNodeVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listNodeByPage(nodeQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {NodeQueryRequest} nodeQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeVOByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listNodeVOByPage(nodeQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {NodeUpdateRequest} nodeUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNode(nodeUpdateRequest: NodeUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateNode(nodeUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeControllerApi - object-oriented interface
 * @export
 * @class NodeControllerApi
 * @extends {BaseAPI}
 */
export class NodeControllerApi extends BaseAPI {
    /**
     *
     * @param {NodeAddRequest} nodeAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public addNode(nodeAddRequest: NodeAddRequest, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).addNode(nodeAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public deleteNode(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).deleteNode(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public getNodeById(id: number, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).getNodeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public getNodeVOById(id: number, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).getNodeVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {NodeQueryRequest} nodeQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public listNodeByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).listNodeByPage(nodeQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {NodeQueryRequest} nodeQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public listNodeVOByPage(nodeQueryRequest: NodeQueryRequest, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).listNodeVOByPage(nodeQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {NodeUpdateRequest} nodeUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public updateNode(nodeUpdateRequest: NodeUpdateRequest, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).updateNode(nodeUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VideoControllerApi - axios parameter creator
 * @export
 */
export const VideoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {VideoAddRequest} videoAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideo: async (videoAddRequest: VideoAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoAddRequest' is not null or undefined
            assertParamExists('addVideo', 'videoAddRequest', videoAddRequest)
            const localVarPath = `/video/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideo: async (idRequest: IdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idRequest' is not null or undefined
            assertParamExists('deleteVideo', 'idRequest', idRequest)
            const localVarPath = `/video/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVideoById', 'id', id)
            const localVarPath = `/video/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoVOById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVideoVOById', 'id', id)
            const localVarPath = `/video/get/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoByPage: async (videoQueryRequest: VideoQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoQueryRequest' is not null or undefined
            assertParamExists('listVideoByPage', 'videoQueryRequest', videoQueryRequest)
            const localVarPath = `/video/list/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoVOByPage: async (videoQueryRequest: VideoQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoQueryRequest' is not null or undefined
            assertParamExists('listVideoVOByPage', 'videoQueryRequest', videoQueryRequest)
            const localVarPath = `/video/list/page/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VideoUpdateRequest} videoUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideo: async (videoUpdateRequest: VideoUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoUpdateRequest' is not null or undefined
            assertParamExists('updateVideo', 'videoUpdateRequest', videoUpdateRequest)
            const localVarPath = `/video/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(videoUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoControllerApi - functional programming interface
 * @export
 */
export const VideoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {VideoAddRequest} videoAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideo(videoAddRequest: VideoAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVideo(videoAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.addVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVideo(idRequest: IdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVideo(idRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.deleteVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoVOById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoVOById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideoVOById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideoByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideoByPage(videoQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.listVideoByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideoVOByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideoVOByPage(videoQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.listVideoVOByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {VideoUpdateRequest} videoUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVideo(videoUpdateRequest: VideoUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideo(videoUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.updateVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VideoControllerApi - factory interface
 * @export
 */
export const VideoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoControllerApiFp(configuration)
    return {
        /**
         *
         * @param {VideoAddRequest} videoAddRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideo(videoAddRequest: VideoAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.addVideo(videoAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IdRequest} idRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideo(idRequest: IdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.deleteVideo(idRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getVideoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoVOById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.getVideoVOById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listVideoByPage(videoQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {VideoQueryRequest} videoQueryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoVOByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.listVideoVOByPage(videoQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {VideoUpdateRequest} videoUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideo(videoUpdateRequest: VideoUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AjaxResult> {
            return localVarFp.updateVideo(videoUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoControllerApi - object-oriented interface
 * @export
 * @class VideoControllerApi
 * @extends {BaseAPI}
 */
export class VideoControllerApi extends BaseAPI {
    /**
     *
     * @param {VideoAddRequest} videoAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public addVideo(videoAddRequest: VideoAddRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).addVideo(videoAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {IdRequest} idRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public deleteVideo(idRequest: IdRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).deleteVideo(idRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideoById(id: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideoVOById(id: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideoVOById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {VideoQueryRequest} videoQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public listVideoByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).listVideoByPage(videoQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {VideoQueryRequest} videoQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public listVideoVOByPage(videoQueryRequest: VideoQueryRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).listVideoVOByPage(videoQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {VideoUpdateRequest} videoUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public updateVideo(videoUpdateRequest: VideoUpdateRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).updateVideo(videoUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



